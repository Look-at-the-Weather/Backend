name: cd-prod

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_REPOSITORY: lookattheweather-prod

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Seoul'

    permissions:
      contents: read
      checks: write
      pull-requests: write

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: wearweather
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD} || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-start-period=30s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4
        with:
          ref: dev

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Check system timezone
        run: |
          echo "Current date and time: $(date)"
          echo "TZ environment variable: $TZ"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Clean Build With Gradle Wrapper
        env:
          SPRING_PROFILES_ACTIVE: local
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
        run: ./gradlew clean build

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: '**/build/test-results/test/TEST-*.xml'
        env:
          GITHUB_TOKEN: ${{ secrets.TEST_RESULT_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Back Up Image For Rollback
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKERHUB_REPOSITORY:latest || true
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKERHUB_REPOSITORY:latest ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKERHUB_REPOSITORY:previous || true
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKERHUB_REPOSITORY:previous || true

      - name: Docker Image Build And Push
        run: |
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY }}:${{ github.sha }}-prod \
              -f Dockerfile \
              --push .

  pull-and-deploy:
    needs: build-and-push
    runs-on: [self-hosted, prod]
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Clean Up Legacy Image
        run: |
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export DOCKERHUB_REPOSITORY=$DOCKERHUB_REPOSITORY
          export JASYPT_ENCRYPTOR_PASSWORD=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          export SPRING_PROFILES_ACTIVE=prod
          export TAG=${{ github.sha }}-prod
          docker compose down || true
          docker rmi $(docker images -q) -f || true

      - name: Docker Compose up
        run: |
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export DOCKERHUB_REPOSITORY=$DOCKERHUB_REPOSITORY
          export JASYPT_ENCRYPTOR_PASSWORD=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          export SPRING_PROFILES_ACTIVE=prod
          export TAG=${{ github.sha }}-prod
          docker compose up -d

      - name: Health Check with Retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 7
          retry_wait_seconds: 60
          command: |
            response=$(curl -s https://.lookattheweather.com/api/v1/actuator/health)
            status=$(echo $response | jq -r '.status')
            if [ "$status" = "UP" ]; then
              echo "Status is UP. Continuing..."
              exit 0
            else
              echo "Status is NOT UP."
              exit 1
            fi

      - name: Rollback if Health Check fails
        if: failure()
        run: |
          docker compose down || true
          docker rmi $(docker images -q) -f || true
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKERHUB_REPOSITORY:previous
          export JASYPT_ENCRYPTOR_PASSWORD=${{ secrets.JASYPT_PASSWORD }}
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export DOCKERHUB_REPOSITORY=$DOCKERHUB_REPOSITORY
          export TAG=previous
          docker compose up -d

      - name: Tag successful deployment as latest
        if: success()
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKERHUB_REPOSITORY:${{ github.sha }}-prod ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKERHUB_REPOSITORY:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKERHUB_REPOSITORY:latest

      - name: Check Docker Process
        if: always()
        run: docker ps
